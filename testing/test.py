from distutils import text_file
from email.encoders import encode_base64
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256


rsa_public_key = RSA.importKey(open("public_keys/" + "user1" + ".pem", "rb").read())
verifier = PKCS1_v1_5.new(rsa_public_key)

rsa_private_key = RSA.importKey(open("user1" + ".prv", "rb").read())
signer = PKCS1_v1_5.new(rsa_private_key)

hasher = SHA256.new(bytes('test', encoding='utf-8'))

signature = signer.sign(hasher)

# print(signature)

signature = b'\x1d\xa6\xbef\xac\xeb\xafK\xa0\x99J\x98\x1a\x10n\x7f>\x1e\xa1\x8cD8$\xa8\xa2\x18\xb1{\xaa\xb19\x05\x94\xc2\x13\xb8(\x13\xe3\xaa\x1cW?\x02\xb4_Vp\xb4Q\x80VI\xea\xee\xb7,* \xd62\x9a\xf1\xfe\xd7\xba\x14\x97\xdb\xd9\xa0\'\xd1q\x0e\x94\xb8\x80DR\x0b\x8a\xc2\xc9\x0e\xfdd\xeau\xe3TL\x90\x82\xf1.\xf9\xeb\x87\xd4\xbf"QpMJ\x83.6\xe2\x10\xc1\xcd\xcf\xaf\xde\r/\x07\xc3\x07%D\x04\xcd\x13\x00\xe1\xb1\xbe"5\xd5ez\x80\x95\xfd\xa6\xe9\xca\xd3\x8cS>\x8cp\x08\xf9*\xc3$N\xbcH\xe7\xd0gOR\x1f\xffW\xb4-7\x13\x0c\xc3\xb8kK\xa2\xbca\xc8I\xbd8Ba\x8f\x8au\xb0j\xcct\x9d\x9b\xee\xfa\xf2\x1c\xd1\xc8\xa6\x91\x85\xb41/\xbbY2{Z\x9ef\x05\xc6\x93\xe3\xf5\x9a]\xd8\x9b\xa7#@@gvH\xf66\x7fCT\x98\xd1\x9e9\xe3@CjQ`\xe1\x8dh\xfbbLx\xedPJ\x88\x84\xfb|>4'

import json
text = int.from_bytes(signature, byteorder='little')
print(text)

text2 = text.to_bytes(256, 'little')
print(text2)
# print(signature.decode("utf-8"))

# print(the_encoding)
# s = signature.decode('unicode_escape')

# # sign_uncoded = bytes(s)
# # print(s)

# signature = s.encode("unicode_escape")

# print(signature)

decrypted = verifier.verify(hasher, b'\x1d\xa6\xbef\xac\xeb\xafK\xa0\x99J\x98\x1a\x10n\x7f>\x1e\xa1\x8cD8$\xa8\xa2\x18\xb1{\xaa\xb19\x05\x94\xc2\x13\xb8(\x13\xe3\xaa\x1cW?\x02\xb4_Vp\xb4Q\x80VI\xea\xee\xb7,* \xd62\x9a\xf1\xfe\xd7\xba\x14\x97\xdb\xd9\xa0\'\xd1q\x0e\x94\xb8\x80DR\x0b\x8a\xc2\xc9\x0e\xfdd\xeau\xe3TL\x90\x82\xf1.\xf9\xeb\x87\xd4\xbf"QpMJ\x83.6\xe2\x10\xc1\xcd\xcf\xaf\xde\r/\x07\xc3\x07%D\x04\xcd\x13\x00\xe1\xb1\xbe"5\xd5ez\x80\x95\xfd\xa6\xe9\xca\xd3\x8cS>\x8cp\x08\xf9*\xc3$N\xbcH\xe7\xd0gOR\x1f\xffW\xb4-7\x13\x0c\xc3\xb8kK\xa2\xbca\xc8I\xbd8Ba\x8f\x8au\xb0j\xcct\x9d\x9b\xee\xfa\xf2\x1c\xd1\xc8\xa6\x91\x85\xb41/\xbbY2{Z\x9ef\x05\xc6\x93\xe3\xf5\x9a]\xd8\x9b\xa7#@@gvH\xf66\x7fCT\x98\xd1\x9e9\xe3@CjQ`\xe1\x8dh\xfbbLx\xedPJ\x88\x84\xfb|>4')
print(decrypted)
# message = 

# verifier = PKCS1_v1_5.new(rsa_key)
# h = SHA.new(signed_qrcode)
# if verifier.verify(h, signature_received_with_the_data):
#     print "OK"
# else:
#     print "Invalid"
